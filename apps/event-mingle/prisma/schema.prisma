// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  password          String
  role              String              @default("user")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  events            Event[]             @relation("Organizer")
  eventParticipants EventParticipant[]
  sentMessages      Message[]           @relation("Sender")
  receivedMessages  Message[]           @relation("Recipient")
  connections1      Connection[]        @relation("User1")
  connections2      Connection[]        @relation("User2")
  payments          Payment[]
  notifications     Notification[]

  @@map("users")
}

model Event {
  id              Int                 @id @default(autoincrement())
  title           String
  description     String
  startDate       DateTime            @map("start_date")
  endDate         DateTime            @map("end_date")
  location        String
  capacity        Int
  price           Int
  organizerId     Int                 @map("organizer_id")
  status          String              @default("draft")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  organizer       User                @relation("Organizer", fields: [organizerId], references: [id])
  participants    EventParticipant[]
  payments        Payment[]

  @@map("events")
}

model EventParticipant {
  id            Int      @id @default(autoincrement())
  eventId       Int      @map("event_id")
  userId        Int      @map("user_id")
  status        String   @default("invited")
  paymentStatus String   @default("pending") @map("payment_status")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  event         Event    @relation(fields: [eventId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@map("event_participants")
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int      @map("sender_id")
  recipientId Int      @map("recipient_id")
  content     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  sender      User     @relation("Sender", fields: [senderId], references: [id])
  recipient   User     @relation("Recipient", fields: [recipientId], references: [id])

  @@map("messages")
}

model Connection {
  id        Int      @id @default(autoincrement())
  userId1   Int      @map("user_id_1")
  userId2   Int      @map("user_id_2")
  type      String
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user1     User     @relation("User1", fields: [userId1], references: [id])
  user2     User     @relation("User2", fields: [userId2], references: [id])

  @@map("connections")
}

model Payment {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  eventId       Int      @map("event_id")
  amount        Int
  status        String   @default("pending")
  paymentMethod String   @map("payment_method")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  user          User     @relation(fields: [userId], references: [id])
  event         Event    @relation(fields: [eventId], references: [id])

  @@map("payments")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
} 